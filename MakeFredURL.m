function [url] = MakeFredURL(urltype, opt, series)

  if ~isfield(opt, 'series')
    error('Please provide a series to pull');
  end
  if ~isfield(opt, 'api')
    error('Please provide a valid api');
  end


  %% Define defaults
  fred_datestr = @(dtnum) datestr(dtnum, 'yyyy-mm-dd');
  defaults = struct('realtime_start',    fred_datestr(date()),...
                    'realtime_end',      fred_datestr(date()),...
                    'observation_start', '1776-07-04',...
                    'observation_end',   '9999-12-31',...
                    'units',             'lin');

  if exist('opt', 'var')
    opt = FillDefaults(defaults, opt);
  else
    opt = defaults;
  end


  %% Return URL
  switch urltype

    % Information about a series
    case 'info'
      url = sprintf([...
        'https://api.stlouisfed.org/fred/series?'...
        'series_id=%s' ...
        '&api_key=%s' ...
        '&realtime_start=%s' ...
        '&realtime_end=%s' ...
        '&units=%s' ...
        '&file_type=json'], ...
        opt.series,...
        opt.api,...
        opt.realtime_start,...
        opt.realtime_end,...
        opt.units);

    case 'obs'
      url = sprintf([...
        'https://api.stlouisfed.org/fred/series/observations?'...
        'series_id=%s' ...
        '&api_key=%s' ...
        '&observation_start=%s' ...
        '&observation_end=%s' ...
        '&realtime_start=%s'...
        '&realtime_end=%s' ...
        '&units=%s' ...
        '&file_type=json'], ...
        opt.series, ...
        opt.api, ...
        fred_datestr(opt.observation_start),...
        fred_datestr(opt.observation_end),...
        fred_datestr(opt.realtime_start), ...
        fred_datestr(opt.realtime_end),...
        opt.units);

      if isfield(opt, 'frequency')
        url = [url '&frequency=' opt.frequency];
      end
  end

end
